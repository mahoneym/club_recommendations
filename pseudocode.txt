/* objects/structs that I will need */
class user:
  interest* interests[SOME_NUMBER]
  int id

class interests:                      // interest or club
  int category
  interest* related[SOME_NUMBER]      // can be interest or clubs
  string name
  int id
  int is_club


/* data structures */
=> some way to store users => LinkedList? Array?
    =>> have one list/array for each graduating class? still need a way to go directly to the student.. hmmmm

=> some way to store clubs => so I don't lose it before I use it


/* methods I could use */
main():
  create the club nodes and put them somewhere organized
  create interest nodes => they'll be the same every time
  add_user_data()

// add a user to the graph thingy
insert_user(user_id):
  if(!find_user):                   // double check the user doesn't already exist
    create user node

add_user_interest():
    add a pointer to each of the user's interests in their array
    if(connection_between_clubs):   // how do i test this
      make club connection
    else:
      add one to the weight of the connection between two clubs

look_for_connection_between_clubs():
  go through and look for the right one?  // there has to be a better way

insert_club():
  create interest node
  connect node to interests/categories

// come up with recommendations for the user
create_user_recommendations(user):
    find_related_clubs_to_user(user)
    make a list of the related clubs and interests
    cut down the list to only clubs
    check for duplicates? go from top to bottom? pick them randomly?

find_related_clubs_to_user(user):
  go to the user => how is based on how users are stored
  follow a few of the user's interest pointers
  go to a few of the clubs related organizations

add_user_data():
  if(!user_exists):
    insert_user()
  add arrows for user
  link 2 organizations?

// returns: NULL- user not found; a pointer to the user
find_user():
  // depends on how I store users

/*  Where will data be stored?
Database seems obvious if web development is coming.
  => Each excel file could be a database table
  => what about storing the graph?
    =>> could the pointers to the users be stored in the database? that seems bad to me for some reason..
          =>>> wait.. do I need user nodes then? I could just use a student's database entry.
          =>>> could I store interests in the database instead of pointers to their nodes?
                  => do students pick the same number all the time? How do I account for more/less in a database?
                  => each club has a code that could represent it
                  => have a hash-map type thing that could, given a club code, return the pointer to the club's node
  => the recommendation will be running on the server => could the graph be stored in memory like I would
      if i was not thinking about putting it into web development
*/
