/* objects/structs that I will need */
class user:                           // if I do the database idea I don't need this
  interest* interests[SOME_NUMBER]
  int id

class interests:                      // interest or club but i will need this to store pointers to related clubs
  int category
  interest* related[SOME_OTHER_NUMBER]      // can be interest or clubs
  string name
  int id
  int is_club

/*
=> maybe separate out clubs and interests => this would allow users who are actually in clubs to
    have the recommendations based on just clubs
=> this would just mean putting another array[list] in the user object/struct
=> PROBLEM: how would i differentiate between the clubs and interests on the form => would
    that just be another step that may not be worth it?
    =>> i could use the is_club boolean that is already present in the interest struct/object
*/

/* thoughts on weighing the connectors between the nodes
- it would be useful for recommending the most common other clubs that people in a certain organization are interested in
- possible downfall: would it lead to only recommending clubs that are already popular? E.g. Everyone is in extreme
    fans => recommending extreme fans is exactly 0 help
*/

/* data structures => can I just use a hashmap? it seems like the obvious choice but i dk */
=> some way to store users => LinkedList? Array?
    =>> have one list/array for each graduating class? still need a way to go directly to the student.. hmmmm
    =>> thought about using a pointer or something in the database, but that just feels wrong to me

=> some way to store clubs => so I don't lose the node before I use it


/* methods I could use */
main():
  create the club AND interest nodes and put them somewhere organized
  create interest nodes => they'll be the same every time
  connect interest nodes to the relevant clubs
  add_user_data()

// add a user to the graph thingy
insert_user(user_id):
  if(!find_user):                   // double check the user doesn't already exist
    create user node

add_user_interest():
    add a pointer to each of the user's interests in their array
    if(connection_between_clubs):   // how do i test this
      make club connection
    else:
      add one to the weight of the connection between two clubs

look_for_connection_between_clubs():
  go through and look for the right one?  // there has to be a better way

insert_club():
  create interest node
  connect node to interests/categories

// come up with recommendations for the user
create_user_recommendations(user):
    find_related_clubs_to_user(user)
    make a list of the related clubs and interests
    cut down the list to only clubs
    check for duplicates? go from top to bottom? pick them randomly?

find_related_clubs_to_user(user):
  go to the user => how is based on how users are stored
  follow a few of the user's interest pointers
  go to a few of those clubs related organizations

add_user_data():
  if(!user_exists):
    insert_user()
  add arrows for user
  link 2 organizations?

// returns: NULL- user not found; a pointer to the user
find_user():
  // depends on how I store users

/* RANDOM NOTES */

/*  Where will data be stored? */
/*
Database seems obvious if web development is coming.
  => Each excel file could be a database table
  => what about storing the graph?
    =>> could the pointers to the users be stored in the database? that seems bad to me for some reason..
          =>>> wait.. do I need user nodes then? I could just use a student's database entry.
          =>>> could I store interests in the database instead of pointers to their nodes?
                  => do students pick the same number all the time? How do I account for more/less in a database?
                  => each club has a code that could represent it => could I have booleans for each interest? Then have
                        another database with clubs and a pointer to its node
                  => have a hash-map type thing that could, given a club code, return the pointer to the club's node
  => the recommendation will be running on the server => could the graph be stored in memory like I would
      if i was not thinking about putting it into web development
*/

/* Category Jazz that I want to try to understand */
/*
- interests (interests.csv): seem like what freshmen get to check boxes; includes tv shows, pep band,
    some clubs, music genres, hobbies, etc.
- Interest categories: more abstract versions of interests; 8 of them; each of the interests are put
    into one of these categories
- club categories: not sure where some came from; some seem to be the same as those in interests.csv;
    others could be in multiple or are more abstract than the interests.csv
*/

/* Questions I have about the system presented in the data */
/*
1. why can't club categories be one of the other categories? Similarly, why are there so many categories of categories?
2. Is it possible to avoid a few of these categories of categories?
3. Is it legal to store pointers in a database? (users have to be in a database anyway right)
*/
